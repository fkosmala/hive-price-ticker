// Hive Price Ticker
// Made by Bambukah
// Thanks to CoinGecko for Price API <3
// Image converter to display logo : https://javl.github.io/image2cpp/

// Headers
#include <TFT_eSPI.h> // Graphics and font lib
#include <SPI.h> // For screen communication
#include <WiFi.h> // For network communications
#include <HTTPClient.h> // GET data from CoinGecko
#include <Arduino_JSON.h> // Parse Json file from CoinGecko

// Replace with your wifi credentials to connect to your home network
const char* ssid = "Your_WiFi_SSID";
const char* password = "Your_WiFi_Passowrd";

// Hostname on network 
String hostname = "HivePriceTicker";

// vars for wifi reconnect
unsigned long previousMillis = 0;
unsigned long interval = 30000;

// Set CoinGeckoID and create endpoint price & 24h change from CoinGecko
String coinId = "hive";
String server = "https://api.coingecko.com/api/v3/simple/price?vs_currencies=usd&include_24hr_change=true&ids=";

// Hive logo into Arduino Code
// 'hive', 120x120px
const unsigned char epd_bitmap_hive [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0xff, 0xf8, 0x00, 
  0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x1f, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x0f, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xf8, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 
  0x00, 0x0f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 
  0x0f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x07, 
  0xff, 0xf8, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x03, 0xff, 
  0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x03, 0xff, 0xfc, 
  0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 0x00, 
  0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xfe, 0x00, 0x07, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x07, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x80, 0x03, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x01, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0x01, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x03, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x03, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 
  0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 
  0xff, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 
  0x03, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0x80, 0x01, 
  0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0x01, 0xff, 
  0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0xff, 0xff, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x80, 
  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0x80, 0x03, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0x03, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x03, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x1f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
  0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 
  0xff, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 
  0xc0, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0x80, 
  0x01, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x03, 
  0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x07, 0xff, 
  0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf8, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf0, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x03, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 
  0x00, 0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 
  0x3f, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 
  0xff, 0xc0, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 
  0x80, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x80, 
  0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x07, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xfe, 0x00, 0x07, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x03, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xf8, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 
  0x00, 0x3f, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
  0x3f, 0xff, 0xc0, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x7f, 
  0xff, 0x80, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0xff, 0xff, 
  0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0xff, 0xff, 0x00, 
  0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x01, 0xff, 0xfe, 0x00, 0x07, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x0f, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x03, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1824)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
  epd_bitmap_hive
};

// Load the eSPI lib into tft var
TFT_eSPI tft = TFT_eSPI();

// Function for Wifi connection
void wifiInit() {
  WiFi.mode(WIFI_STA);
  WiFi.config(INADDR_NONE, INADDR_NONE, INADDR_NONE, INADDR_NONE);
  WiFi.setHostname(hostname.c_str()); //define hostname
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

// Create URL
String endpoint = server + coinId;

void setup(void) {
  // Serial ignition
  Serial.begin(115200);

  // Screen Initialization 
  tft.init();
  tft.setRotation(1);
  delay(100);
  Serial.println("Screen Setup done , Width & Height");
  Serial.println(tft.width());
  Serial.println(tft.height());
  
  // Fill screen with Black color
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(0, 0, 2);

  // Display init text
  tft.setTextColor(TFT_RED,TFT_BLACK);
  tft.setTextFont(4);
  tft.println("Hive Price Ticker");
  
  tft.setTextColor(TFT_WHITE,TFT_BLACK);
  tft.setTextFont(2);
  tft.println("By Bambukah");

  tft.setTextColor(TFT_GREEN,TFT_BLACK);
  tft.setTextFont(4);
  tft.println(" ");
  tft.println("Connecting...");

  // Set WiFi to station mode
  wifiInit();
  Serial.println("Wifi Setup done");
}

void loop() {
  // Fill screen with Black color
  tft.fillScreen(TFT_BLACK);

  // Display Logo
  tft.drawBitmap(120, 5, epd_bitmap_hive, 120, 120, 100);
  
  // Check if Wifi is always connected. If not, try to reconnect
  unsigned long currentMillis = millis();
  if ((WiFi.status() != WL_CONNECTED) && (currentMillis - previousMillis >=interval)) {
    Serial.print(millis());
    Serial.println("Wifi Reconnect...");
    WiFi.disconnect();
    WiFi.reconnect();
    previousMillis = currentMillis;
  }

  // Create HTTP Request Client
  HTTPClient http;

  // Specify endpoint
  http.begin(endpoint);

  // Query the server to get JSON 
  int httpCode = http.GET();
  if (httpCode > 0) { // If request is OK
    String payload = http.getString();
    // Serial.println(payload): // Uncomment for Debug refreshing
    
    // Covert payload to JSON
    JSONVar result = JSON.parse(payload);

    String value = String((double)result[coinId]["usd"]);
    float h24 = (double)result[coinId]["usd_24h_change"] * 100 / 100;
    String change = String(h24);

    // Create new var to Uppercase for display
    String coin = coinId;
    coin.toUpperCase();

    // Display all texts
    tft.setCursor(0, 0, 4);
    tft.setTextColor(TFT_RED,TFT_BLACK);
    tft.println(coin);
    tft.setTextColor(TFT_WHITE,TFT_BLACK);
    tft.println(" ");
    tft.println(value +" USD");
    char sign = change.charAt(0);

    // Check if change is negative to display in red or green if it's positive
    if (sign == '-') {
      tft.setTextColor(TFT_RED,TFT_BLACK);
      tft.println(change +" %");
    } else {
      tft.setTextColor(TFT_GREEN,TFT_BLACK);
      tft.println("+"+change+" %");
    } 
  } else {
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(0, 0, 2);
    tft.setTextColor(TFT_WHITE,TFT_BLACK);
    tft.println("Error from HTTP Request");
    tft.println("Wait 30 sec before retry");
  }

  http.end();
  delay(interval);
}
